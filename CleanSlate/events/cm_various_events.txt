###########################################
# Charlemagne various events              #
#                                         #
# ID CM.2000-CM.3999                      #
# ID CM.5000-CM.5999                      #
###########################################

# Written by Tobias Bodlund

namespace = CM

# Ragnar Lodbrok gains his nickname
character_event = {
	id = CM.5000
	desc = EVTDESC_CM_5000
	picture = GFX_evt_child_sword

	is_triggered_only = yes # on_yearly_pulse

	has_character_flag = is_ragnar_lodbrok
	only_men = yes
	has_dlc = "Charlemagne"

	trigger = {
		year >= 780
		year < 795
		NOT = { has_nickname = nick_lodbrok }
	}

	option = {
		name = EVTOPTA_CM_5001

		give_nickname = nick_lodbrok
		prestige = 10
		add_trait = robust
		add_trait = diligent

		father = {
			character_event = { id = CM.5001 }
		}

		if = {
			limit = { has_dlc = "Holy Fury" }

			create_bloodline = {
				type = ragnarr_lodbrok
			}
		}
	}
}

# Father
character_event = {
	id = CM.5001
	desc = EVTDESC_CM_5001
	picture = GFX_evt_child_sword

	is_triggered_only = yes

	option = {
		name = EVTOPTA_CM_5001

		tooltip = {
			c_163109 = {
				show_scope_change = no

				give_nickname = nick_lodbrok
				prestige = 10
				add_trait = robust
				add_trait = diligent
			}
		}
	}
}

###########################################
# Hero knight events                      #
# ID CM.2000-CM.3999                      #
###########################################

###########################################
# Hero knight appears                     #
###########################################

character_event = {
	id = CM.2000
	desc = EVTDESC_CM_2000
	picture = GFX_evt_emissary

	ai = no
	has_dlc = "Charlemagne"
	min_age = 16
	only_capable = yes
	prisoner = no

	trigger = {
		higher_real_tier_than = DUKE
	}

	mean_time_to_happen = {
		months = 2000
	}

	option = {
		name = EVTOPTA_CM_2000

		create_character = {
			random_traits = no
			dynasty = random
			religion = ROOT
			culture = ROOT
			age = 35
			add_trait = brave
			add_trait = strong
			add_trait = skilled_tactician

			attributes = {
				martial = 10
			}
		}

		new_character = {
			set_character_flag = hero_knight

			opinion = {
				name = opinion_loyal_servant
				who = ROOT
				years = 100
			}
		}
	}

	option = {
		name = EVTOPTB_CM_2000

		prestige = 10
	}
}

#########################################################
# Knight is guardian to your child - child gains traits #
#########################################################

character_event = {
	id = CM.2020

	is_triggered_only = yes
	hide_window = yes

	ai = no
	has_dlc = "Charlemagne"
	only_men = yes
	min_age = 16
	only_capable = yes
	prisoner = no
	in_command = no

	trigger = {
		is_inaccessible_trigger = no

		any_child = {
			age >= 9

			trigger_if = {
				limit = { is_female = yes }

				OR = {
					religion = cathar
					religion = messalian
					father = { has_law = status_of_women_4 }
					mother = { has_law = status_of_women_4 }

					has_game_rule = {
						name = gender
						value = all
					}
				}
			}

			guardian = {
				has_character_flag = hero_knight
				NOT = { has_character_flag = knight_adventure }
				prisoner = no
			}

			# To qualify for at least one event
			OR = {
				AND = {
					NOT = { trait = brave }

					guardian = {
						NOT = { trait = craven }
					}
				}

				is_strong_trigger = no

				AND = {
					lifestyle_traits < 1
					NOT = { has_dlc = "Way of Life" }
				}

				AND = {
					NOT = { trait = just }

					guardian = {
						NOT = { trait = arbitrary }
					}
				}

				AND = {
					NOT = { trait = wounded }
					can_be_maimed_trigger = yes
				}
			}
		}
	}

	immediate = {
		random_child = {
			limit = {
				age >= 9

				trigger_if = {
					limit = { is_female = yes }

					OR = {
						religion = cathar
						religion = messalian
						father = { has_law = status_of_women_4 }
						mother = { has_law = status_of_women_4 }

						has_game_rule = {
							name = gender
							value = all
						}
					}
				}

				guardian = {
					has_character_flag = hero_knight
					NOT = { has_character_flag = knight_adventure }
					prisoner = no
				}

				# To qualify for at least one event
				OR = {
					AND = {
						NOT = { trait = brave }

						guardian = {
							NOT = { trait = craven }
						}
					}

					is_strong_trigger = no

					AND = {
						lifestyle_traits < 1
						NOT = { has_dlc = "Way of Life" }
					}

					AND = {
						NOT = { trait = just }

						guardian = {
							NOT = { trait = arbitrary }
						}
					}

					AND = {
						NOT = { trait = wounded }
						can_be_maimed_trigger = yes
					}
				}
			}

			save_event_target_as = target_child

			random_list = {
				10 = {
					trigger = {
						NOT = { trait = brave }

						guardian = {
							NOT = { trait = craven }
						}
					}

					ROOT = {
						character_event = { id = CM.2022 } # Brave
					}
				}

				10 = {
					trigger = {
						is_strong_trigger = no
					}

					ROOT = {
						character_event = { id = CM.2024 } # Strong
					}
				}

				10 = {
					trigger = {
						lifestyle_traits < 1
						NOT = { has_dlc = "Way of Life" }
					}

					ROOT = {
						character_event = { id = CM.2026 } # Duelist
					}
				}

				10 = {
					trigger = {
						NOT = { trait = just }

						guardian = {
							NOT = { trait = arbitrary }
						}
					}

					ROOT = {
						character_event = { id = CM.2028 } # Just
					}
				}

				1 = {
					trigger = {
						NOT = { trait = wounded }
						can_be_maimed_trigger = yes
					}

					character_event = { id = CM.2029 } # Wounded or maimed
				}
			}
		}
	}
}

# Child learns bravery
character_event = {
	id = CM.2022
	desc = EVTDESC_CM_2022
	picture = GFX_evt_child_sword

	is_triggered_only = yes

	option = {
		name = EXCELLENT

		event_target:target_child = {
			show_scope_change = no

			add_trait = brave
		}
	}
}

# Child becomes strong
character_event = {
	id = CM.2024
	desc = EVTDESC_CM_2024
	picture = GFX_evt_child_sword

	is_triggered_only = yes

	option = {
		name = EXCELLENT

		event_target:target_child = {
			show_scope_change = no

			add_trait = robust
		}
	}
}

# Child becomes a duelist
character_event = {
	id = CM.2026
	desc = EVTDESC_CM_2026
	picture = GFX_evt_child_sword

	is_triggered_only = yes

	option = {
		name = EVTOPTA_CM_2026

		trigger = {
			NOT = { trait = duelist }
		}
	}

	option = {
		name = EVTOPTB_CM_2026

		trigger = {
			trait = duelist
			event_target:target_child = { is_female = no }
		}
	}

	option = {
		name = EVTOPTC_CM_2026

		trigger = {
			trait = duelist
			event_target:target_child = { is_female = yes }
		}
	}

	after = {
		event_target:target_child = {
			show_scope_change = no

			add_trait = duelist
		}
	}
}

# Child learns justice
character_event = {
	id = CM.2028
	desc = EVTDESC_CM_2028
	picture = GFX_evt_guardian

	is_triggered_only = yes

	option = {
		name = EVTOPTA_CM_2028

		trigger = {
			NOT = { trait = arbitrary }
		}
	}

	option = {
		name = EVTOPTB_CM_2028

		trigger = {
			trait = arbitrary
		}
	}

	after = {
		event_target:target_child = {
			show_scope_change = no

			add_trait = just
		}
	}
}

# Child is wounded or maimed while practising with knight
character_event = {
	id = CM.2029

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		random_list = {
			80 = { add_trait = wounded }
			20 = { add_maimed_trait_effect = yes }
		}

		FROM = {
			character_event = { id = CM.2030 }
		}
	}
}

character_event = {
	id = CM.2030
	desc = EVTDESC_CM_2030
	picture = GFX_evt_child_sword

	is_triggered_only = yes

	option = {
		name = EVTOPTA_CM_2030

		trigger = {
			event_target:target_child = { trait = wounded }
		}

		tooltip = {
			event_target:target_child = {
				show_scope_change = no

				add_trait = wounded
			}
		}
	}

	option = {
		name = EVTOPTA_CM_2030

		trigger = {
			event_target:target_child = { is_maimed_trigger = yes }
		}

		tooltip = {
			event_target:target_child = {
				show_scope_change = no

				trigger_switch = {
					on_trigger = trait

					maimed = { add_trait = maimed }
					one_eyed = { add_trait = one_eyed }
					one_handed = { add_trait = one_handed }
					one_legged = { add_trait = one_legged }
					disfigured = { add_trait = disfigured }
					mangled = { add_trait = mangled }
				}
			}
		}
	}
}